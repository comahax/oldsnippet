/**
 * Copyright(c)1994-2007 SRE. All rights reserved.<br>
 * Use is subject to license terms.
 */
package com.asisinfo.common.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.*;

/**
 * 
 * @author chenhm
 * @created 2007-7-10 上午10:45:46
 * @version 1.0
 */
public class SqlStatement implements Statement, PureSQL {
	protected List allSql = new Vector();

	protected List BatchVector = new Vector();

	public List getAllSql() {
		return allSql;
	}

	public List getQuerySql() {
		List query = new LinkedList();
		for (Iterator iter = allSql.iterator(); iter.hasNext();) {
			String sql = (String) iter.next();
			String key = sql.substring(0, 6);
			if (key.equalsIgnoreCase("SELECT")) {
				query.add(sql);
			}
		}
		return query;
	}

	public List getUpdateSql() {
		List query = new LinkedList();
		for (Iterator iter = allSql.iterator(); iter.hasNext();) {
			String sql = (String) iter.next();
			String key = sql.substring(0, 6);
			if (key.equalsIgnoreCase("UPDATE")
					|| key.equalsIgnoreCase("DELETE")
					|| key.equalsIgnoreCase("INSERT")) {
				query.add(sql);
			}
		}
		return query;
	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#addBatch(java.lang.String)
	 */
	public void addBatch(String sql) throws SQLException {
		BatchVector.add(sql.trim());
	}

	/**
	 * 如果 DBMS 和驱动程序都支持中止 SQL 语句，则取消此 Statement 对象。一个线程可以使用此方法取消另一个线程正在执行的语句。
	 * 此处无法实现该方法
	 * 
	 * @see java.sql.Statement#cancel()
	 */
	public void cancel() throws SQLException {

	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#clearBatch()
	 */
	public void clearBatch() throws SQLException {
		BatchVector.clear();
	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#clearWarnings()
	 */
	public void clearWarnings() throws SQLException {
		// ignore

	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#close()
	 */
	public void close() throws SQLException {
		// ignore

	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#execute(java.lang.String)
	 */
	public boolean execute(String sql) throws SQLException {
		allSql.add(sql.trim());
		return true;
	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#execute(java.lang.String, int)
	 */
	public boolean execute(String sql, int autoGeneratedKeys)
			throws SQLException {
		return execute(sql);
	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#execute(java.lang.String, int[])
	 */
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return execute(sql);
	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#execute(java.lang.String, java.lang.String[])
	 */
	public boolean execute(String sql, String[] columnNames)
			throws SQLException {
		return execute(sql);
	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#executeBatch()
	 */
	public int[] executeBatch() throws SQLException {
		allSql.addAll(BatchVector);
		return null;
	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#executeQuery(java.lang.String)
	 */
	public ResultSet executeQuery(String sql) throws SQLException {
		execute(sql);
		return null;
	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#executeUpdate(java.lang.String)
	 */
	public int executeUpdate(String sql) throws SQLException {
		execute(sql);
		return 0;
	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#executeUpdate(java.lang.String, int)
	 */
	public int executeUpdate(String sql, int autoGeneratedKeys)
			throws SQLException {
		execute(sql);
		return 0;
	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#executeUpdate(java.lang.String, int[])
	 */
	public int executeUpdate(String sql, int[] columnIndexes)
			throws SQLException {
		execute(sql);
		return 0;
	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#executeUpdate(java.lang.String,
	 *      java.lang.String[])
	 */
	public int executeUpdate(String sql, String[] columnNames)
			throws SQLException {
		execute(sql);
		return 0;
	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#getConnection()
	 */
	public Connection getConnection() throws SQLException {
		return null;
	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#getFetchDirection()
	 */
	public int getFetchDirection() throws SQLException {
		return 0;
	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#getFetchSize()
	 */
	public int getFetchSize() throws SQLException {
		return 0;
	}

	/*
	 * 检索由于执行此 Statement 对象而创建的所有自动生成的键
	 * 
	 * @see java.sql.Statement#getGeneratedKeys()
	 */
	public ResultSet getGeneratedKeys() throws SQLException {
		return null;
	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#getMaxFieldSize()
	 */
	public int getMaxFieldSize() throws SQLException {
		return 0;
	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#getMaxRows()
	 */
	public int getMaxRows() throws SQLException {
		return 0;
	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#getMoreResults()
	 */
	public boolean getMoreResults() throws SQLException {
		return false;
	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#getMoreResults(int)
	 */
	public boolean getMoreResults(int current) throws SQLException {
		return false;
	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#getQueryTimeout()
	 */
	public int getQueryTimeout() throws SQLException {
		return 0;
	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#getResultSet()
	 */
	public ResultSet getResultSet() throws SQLException {
		return null;
	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#getResultSetConcurrency()
	 */
	public int getResultSetConcurrency() throws SQLException {
		return 0;
	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#getResultSetHoldability()
	 */
	public int getResultSetHoldability() throws SQLException {
		return 0;
	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#getResultSetType()
	 */
	public int getResultSetType() throws SQLException {
		return 0;
	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#getUpdateCount()
	 */
	public int getUpdateCount() throws SQLException {
		return 0;
	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#getWarnings()
	 */
	public SQLWarning getWarnings() throws SQLException {
		return null;
	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#setCursorName(java.lang.String)
	 */
	public void setCursorName(String name) throws SQLException {
		// ignore

	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#setEscapeProcessing(boolean)
	 */
	public void setEscapeProcessing(boolean enable) throws SQLException {
		// ignore 无法真正模拟驱动的转义处理

	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#setFetchDirection(int)
	 */
	public void setFetchDirection(int direction) throws SQLException {
		// ignore

	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#setFetchSize(int)
	 */
	public void setFetchSize(int rows) throws SQLException {
		// ignore

	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#setMaxFieldSize(int)
	 */
	public void setMaxFieldSize(int max) throws SQLException {
		// ignore

	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#setMaxRows(int)
	 */
	public void setMaxRows(int max) throws SQLException {
		// ignore

	}

	/*
	 * （non Javadoc）
	 * 
	 * @see java.sql.Statement#setQueryTimeout(int)
	 */
	public void setQueryTimeout(int seconds) throws SQLException {
		// ignore

	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("未实现");
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("未实现");
	}

	@Override
	public boolean isClosed() throws SQLException {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("未实现");
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("未实现");
	}

	@Override
	public boolean isPoolable() throws SQLException {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("未实现");
	}


}
