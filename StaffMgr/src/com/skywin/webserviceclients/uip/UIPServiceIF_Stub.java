// Helper class generated by xrpcc, do not edit.
// Contents subject to change without notice.

package com.skywin.webserviceclients.uip;

import java.rmi.RemoteException;

import javax.xml.namespace.QName;
import javax.xml.rpc.JAXRPCException;
import javax.xml.rpc.handler.HandlerChain;

import com.asisinfo.common.utils.SystemPropertiesUtils;
import com.sun.xml.rpc.client.SenderException;
import com.sun.xml.rpc.client.StreamingSenderState;
import com.sun.xml.rpc.client.http.HttpClientTransport;
import com.sun.xml.rpc.encoding.CombinedSerializer;
import com.sun.xml.rpc.encoding.InternalTypeMappingRegistry;
import com.sun.xml.rpc.encoding.SOAPDeserializationContext;
import com.sun.xml.rpc.encoding.SOAPDeserializationState;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.soap.message.InternalSOAPMessage;
import com.sun.xml.rpc.soap.message.SOAPBlockInfo;
import com.sun.xml.rpc.soap.streaming.SOAPNamespaceConstants;
import com.sun.xml.rpc.streaming.XMLReader;

public class UIPServiceIF_Stub
    extends com.sun.xml.rpc.client.StubBase
    implements com.skywin.webserviceclients.uip.UIPServiceIF {
	
	//�������ַ
    //private String endpoint_address = "http://portal-oa.gmcc.net:9999/uipservice2/uipservice";
    //���Է����ַ
    private String endpoint_address = SystemPropertiesUtils.getSystemPropertiesStringValue("sso_address");
    
    /*
     *  public constructor
     */
    public UIPServiceIF_Stub(HandlerChain handlerChain) {
        super(handlerChain);
        _setProperty(ENDPOINT_ADDRESS_PROPERTY, endpoint_address);
    }
    
    /*
     *  implementation of applicationToDo
     */
    public com.skywin.webserviceclients.uip.AppResult applicationToDo(java.lang.String string_1, java.lang.String string_2, java.lang.String string_3, java.lang.String string_4, java.lang.String string_5, int int_6, java.lang.String string_7, java.lang.String string_8, java.lang.String string_9, java.lang.String string_10, int int_11)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(applicationToDo_OPCODE);
            com.skywin.webserviceclients.uip.UIPServiceIF_applicationToDo_RequestStruct _myUIPServiceIF_applicationToDo_RequestStruct =
                new com.skywin.webserviceclients.uip.UIPServiceIF_applicationToDo_RequestStruct();
            
            _myUIPServiceIF_applicationToDo_RequestStruct.setString_1(string_1);
            _myUIPServiceIF_applicationToDo_RequestStruct.setString_2(string_2);
            _myUIPServiceIF_applicationToDo_RequestStruct.setString_3(string_3);
            _myUIPServiceIF_applicationToDo_RequestStruct.setString_4(string_4);
            _myUIPServiceIF_applicationToDo_RequestStruct.setString_5(string_5);
            _myUIPServiceIF_applicationToDo_RequestStruct.setInt_6(int_6);
            _myUIPServiceIF_applicationToDo_RequestStruct.setString_7(string_7);
            _myUIPServiceIF_applicationToDo_RequestStruct.setString_8(string_8);
            _myUIPServiceIF_applicationToDo_RequestStruct.setString_9(string_9);
            _myUIPServiceIF_applicationToDo_RequestStruct.setString_10(string_10);
            _myUIPServiceIF_applicationToDo_RequestStruct.setInt_11(int_11);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_applicationToDo_applicationToDo_QNAME);
            _bodyBlock.setValue(_myUIPServiceIF_applicationToDo_RequestStruct);
            _bodyBlock.setSerializer(myUIPServiceIF_applicationToDo_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.skywin.webserviceclients.uip.UIPServiceIF_applicationToDo_ResponseStruct _myUIPServiceIF_applicationToDo_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myUIPServiceIF_applicationToDo_ResponseStruct =
                    (com.skywin.webserviceclients.uip.UIPServiceIF_applicationToDo_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myUIPServiceIF_applicationToDo_ResponseStruct =
                    (com.skywin.webserviceclients.uip.UIPServiceIF_applicationToDo_ResponseStruct)_responseObj;
            }
            
            return _myUIPServiceIF_applicationToDo_ResponseStruct.getResult();
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getUserInfoByOUID
     */
    public com.skywin.webserviceclients.uip.QueryResult getUserInfoByOUID(int int_1, boolean boolean_2, java.lang.String string_3, java.lang.String string_4)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getUserInfoByOUID_OPCODE);
            com.skywin.webserviceclients.uip.UIPServiceIF_getUserInfoByOUID_RequestStruct _myUIPServiceIF_getUserInfoByOUID_RequestStruct =
                new com.skywin.webserviceclients.uip.UIPServiceIF_getUserInfoByOUID_RequestStruct();
            
            _myUIPServiceIF_getUserInfoByOUID_RequestStruct.setInt_1(int_1);
            _myUIPServiceIF_getUserInfoByOUID_RequestStruct.setBoolean_2(boolean_2);
            _myUIPServiceIF_getUserInfoByOUID_RequestStruct.setString_3(string_3);
            _myUIPServiceIF_getUserInfoByOUID_RequestStruct.setString_4(string_4);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getUserInfoByOUID_getUserInfoByOUID_QNAME);
            _bodyBlock.setValue(_myUIPServiceIF_getUserInfoByOUID_RequestStruct);
            _bodyBlock.setSerializer(myUIPServiceIF_getUserInfoByOUID_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.skywin.webserviceclients.uip.UIPServiceIF_getUserInfoByOUID_ResponseStruct _myUIPServiceIF_getUserInfoByOUID_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myUIPServiceIF_getUserInfoByOUID_ResponseStruct =
                    (com.skywin.webserviceclients.uip.UIPServiceIF_getUserInfoByOUID_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myUIPServiceIF_getUserInfoByOUID_ResponseStruct =
                    (com.skywin.webserviceclients.uip.UIPServiceIF_getUserInfoByOUID_ResponseStruct)_responseObj;
            }
            
            return _myUIPServiceIF_getUserInfoByOUID_ResponseStruct.getResult();
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getVersion
     */
    public java.lang.String getVersion()
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getVersion_OPCODE);
            com.skywin.webserviceclients.uip.UIPServiceIF_getVersion_RequestStruct _myUIPServiceIF_getVersion_RequestStruct =
                new com.skywin.webserviceclients.uip.UIPServiceIF_getVersion_RequestStruct();
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getVersion_getVersion_QNAME);
            _bodyBlock.setValue(_myUIPServiceIF_getVersion_RequestStruct);
            _bodyBlock.setSerializer(myUIPServiceIF_getVersion_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.skywin.webserviceclients.uip.UIPServiceIF_getVersion_ResponseStruct _myUIPServiceIF_getVersion_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myUIPServiceIF_getVersion_ResponseStruct =
                    (com.skywin.webserviceclients.uip.UIPServiceIF_getVersion_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myUIPServiceIF_getVersion_ResponseStruct =
                    (com.skywin.webserviceclients.uip.UIPServiceIF_getVersion_ResponseStruct)_responseObj;
            }
            
            return _myUIPServiceIF_getVersion_ResponseStruct.getResult();
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of logout
     */
    public void logout(java.lang.String string_1)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(Logout_OPCODE);
            com.skywin.webserviceclients.uip.UIPServiceIF_Logout_RequestStruct _myUIPServiceIF_Logout_RequestStruct =
                new com.skywin.webserviceclients.uip.UIPServiceIF_Logout_RequestStruct();
            
            _myUIPServiceIF_Logout_RequestStruct.setString_1(string_1);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_Logout_Logout_QNAME);
            _bodyBlock.setValue(_myUIPServiceIF_Logout_RequestStruct);
            _bodyBlock.setSerializer(myUIPServiceIF_Logout_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.skywin.webserviceclients.uip.UIPServiceIF_Logout_ResponseStruct _myUIPServiceIF_Logout_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myUIPServiceIF_Logout_ResponseStruct =
                    (com.skywin.webserviceclients.uip.UIPServiceIF_Logout_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myUIPServiceIF_Logout_ResponseStruct =
                    (com.skywin.webserviceclients.uip.UIPServiceIF_Logout_ResponseStruct)_responseObj;
            }
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of validateToken
     */
    public com.skywin.webserviceclients.uip.AuthResult validateToken(java.lang.String string_1, java.lang.String string_2)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(ValidateToken_OPCODE);
            com.skywin.webserviceclients.uip.UIPServiceIF_ValidateToken_RequestStruct _myUIPServiceIF_ValidateToken_RequestStruct =
                new com.skywin.webserviceclients.uip.UIPServiceIF_ValidateToken_RequestStruct();
            
            _myUIPServiceIF_ValidateToken_RequestStruct.setString_1(string_1);
            _myUIPServiceIF_ValidateToken_RequestStruct.setString_2(string_2);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_ValidateToken_ValidateToken_QNAME);
            _bodyBlock.setValue(_myUIPServiceIF_ValidateToken_RequestStruct);
            _bodyBlock.setSerializer(myUIPServiceIF_ValidateToken_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.skywin.webserviceclients.uip.UIPServiceIF_ValidateToken_ResponseStruct _myUIPServiceIF_ValidateToken_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myUIPServiceIF_ValidateToken_ResponseStruct =
                    (com.skywin.webserviceclients.uip.UIPServiceIF_ValidateToken_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myUIPServiceIF_ValidateToken_ResponseStruct =
                    (com.skywin.webserviceclients.uip.UIPServiceIF_ValidateToken_ResponseStruct)_responseObj;
            }
            
            return _myUIPServiceIF_ValidateToken_ResponseStruct.getResult();
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of commonLogin
     */
    public com.skywin.webserviceclients.uip.AuthResult commonLogin(java.lang.String string_1, java.lang.String string_2, java.lang.String string_3, int int_4)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(CommonLogin_OPCODE);
            com.skywin.webserviceclients.uip.UIPServiceIF_CommonLogin_RequestStruct _myUIPServiceIF_CommonLogin_RequestStruct =
                new com.skywin.webserviceclients.uip.UIPServiceIF_CommonLogin_RequestStruct();
            
            _myUIPServiceIF_CommonLogin_RequestStruct.setString_1(string_1);
            _myUIPServiceIF_CommonLogin_RequestStruct.setString_2(string_2);
            _myUIPServiceIF_CommonLogin_RequestStruct.setString_3(string_3);
            _myUIPServiceIF_CommonLogin_RequestStruct.setInt_4(int_4);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_CommonLogin_CommonLogin_QNAME);
            _bodyBlock.setValue(_myUIPServiceIF_CommonLogin_RequestStruct);
            _bodyBlock.setSerializer(myUIPServiceIF_CommonLogin_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.skywin.webserviceclients.uip.UIPServiceIF_CommonLogin_ResponseStruct _myUIPServiceIF_CommonLogin_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myUIPServiceIF_CommonLogin_ResponseStruct =
                    (com.skywin.webserviceclients.uip.UIPServiceIF_CommonLogin_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myUIPServiceIF_CommonLogin_ResponseStruct =
                    (com.skywin.webserviceclients.uip.UIPServiceIF_CommonLogin_ResponseStruct)_responseObj;
            }
            
            return _myUIPServiceIF_CommonLogin_ResponseStruct.getResult();
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of applicationToRead
     */
    public com.skywin.webserviceclients.uip.AppResult applicationToRead(java.lang.String string_1, java.lang.String string_2, java.lang.String string_3, java.lang.String string_4, int int_5, java.lang.String string_6, java.lang.String string_7, java.lang.String string_8, java.lang.String string_9, int int_10)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(applicationToRead_OPCODE);
            com.skywin.webserviceclients.uip.UIPServiceIF_applicationToRead_RequestStruct _myUIPServiceIF_applicationToRead_RequestStruct =
                new com.skywin.webserviceclients.uip.UIPServiceIF_applicationToRead_RequestStruct();
            
            _myUIPServiceIF_applicationToRead_RequestStruct.setString_1(string_1);
            _myUIPServiceIF_applicationToRead_RequestStruct.setString_2(string_2);
            _myUIPServiceIF_applicationToRead_RequestStruct.setString_3(string_3);
            _myUIPServiceIF_applicationToRead_RequestStruct.setString_4(string_4);
            _myUIPServiceIF_applicationToRead_RequestStruct.setInt_5(int_5);
            _myUIPServiceIF_applicationToRead_RequestStruct.setString_6(string_6);
            _myUIPServiceIF_applicationToRead_RequestStruct.setString_7(string_7);
            _myUIPServiceIF_applicationToRead_RequestStruct.setString_8(string_8);
            _myUIPServiceIF_applicationToRead_RequestStruct.setString_9(string_9);
            _myUIPServiceIF_applicationToRead_RequestStruct.setInt_10(int_10);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_applicationToRead_applicationToRead_QNAME);
            _bodyBlock.setValue(_myUIPServiceIF_applicationToRead_RequestStruct);
            _bodyBlock.setSerializer(myUIPServiceIF_applicationToRead_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.skywin.webserviceclients.uip.UIPServiceIF_applicationToRead_ResponseStruct _myUIPServiceIF_applicationToRead_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myUIPServiceIF_applicationToRead_ResponseStruct =
                    (com.skywin.webserviceclients.uip.UIPServiceIF_applicationToRead_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myUIPServiceIF_applicationToRead_ResponseStruct =
                    (com.skywin.webserviceclients.uip.UIPServiceIF_applicationToRead_ResponseStruct)_responseObj;
            }
            
            return _myUIPServiceIF_applicationToRead_ResponseStruct.getResult();
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of SSOLogin
     */
    public com.skywin.webserviceclients.uip.AuthResult SSOLogin(java.lang.String string_1, java.lang.String string_2, java.lang.String string_3, int int_4)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(SSOLogin_OPCODE);
            com.skywin.webserviceclients.uip.UIPServiceIF_SSOLogin_RequestStruct _myUIPServiceIF_SSOLogin_RequestStruct =
                new com.skywin.webserviceclients.uip.UIPServiceIF_SSOLogin_RequestStruct();
            
            _myUIPServiceIF_SSOLogin_RequestStruct.setString_1(string_1);
            _myUIPServiceIF_SSOLogin_RequestStruct.setString_2(string_2);
            _myUIPServiceIF_SSOLogin_RequestStruct.setString_3(string_3);
            _myUIPServiceIF_SSOLogin_RequestStruct.setInt_4(int_4);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_SSOLogin_SSOLogin_QNAME);
            _bodyBlock.setValue(_myUIPServiceIF_SSOLogin_RequestStruct);
            _bodyBlock.setSerializer(myUIPServiceIF_SSOLogin_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.skywin.webserviceclients.uip.UIPServiceIF_SSOLogin_ResponseStruct _myUIPServiceIF_SSOLogin_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myUIPServiceIF_SSOLogin_ResponseStruct =
                    (com.skywin.webserviceclients.uip.UIPServiceIF_SSOLogin_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myUIPServiceIF_SSOLogin_ResponseStruct =
                    (com.skywin.webserviceclients.uip.UIPServiceIF_SSOLogin_ResponseStruct)_responseObj;
            }
            
            return _myUIPServiceIF_SSOLogin_ResponseStruct.getResult();
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getOrgnizationInfoByOUID
     */
    public com.skywin.webserviceclients.uip.OrganizationInfo getOrgnizationInfoByOUID(int int_1, boolean boolean_2, java.lang.String string_3, java.lang.String string_4)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getOrgnizationInfoByOUID_OPCODE);
            com.skywin.webserviceclients.uip.UIPServiceIF_getOrgnizationInfoByOUID_RequestStruct _myUIPServiceIF_getOrgnizationInfoByOUID_RequestStruct =
                new com.skywin.webserviceclients.uip.UIPServiceIF_getOrgnizationInfoByOUID_RequestStruct();
            
            _myUIPServiceIF_getOrgnizationInfoByOUID_RequestStruct.setInt_1(int_1);
            _myUIPServiceIF_getOrgnizationInfoByOUID_RequestStruct.setBoolean_2(boolean_2);
            _myUIPServiceIF_getOrgnizationInfoByOUID_RequestStruct.setString_3(string_3);
            _myUIPServiceIF_getOrgnizationInfoByOUID_RequestStruct.setString_4(string_4);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getOrgnizationInfoByOUID_getOrgnizationInfoByOUID_QNAME);
            _bodyBlock.setValue(_myUIPServiceIF_getOrgnizationInfoByOUID_RequestStruct);
            _bodyBlock.setSerializer(myUIPServiceIF_getOrgnizationInfoByOUID_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.skywin.webserviceclients.uip.UIPServiceIF_getOrgnizationInfoByOUID_ResponseStruct _myUIPServiceIF_getOrgnizationInfoByOUID_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myUIPServiceIF_getOrgnizationInfoByOUID_ResponseStruct =
                    (com.skywin.webserviceclients.uip.UIPServiceIF_getOrgnizationInfoByOUID_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myUIPServiceIF_getOrgnizationInfoByOUID_ResponseStruct =
                    (com.skywin.webserviceclients.uip.UIPServiceIF_getOrgnizationInfoByOUID_ResponseStruct)_responseObj;
            }
            
            return _myUIPServiceIF_getOrgnizationInfoByOUID_ResponseStruct.getResult();
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getUserInfoByUserID
     */
    public com.skywin.webserviceclients.uip.UserInfo getUserInfoByUserID(java.lang.String string_1, java.lang.String string_2, java.lang.String string_3)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getUserInfoByUserID_OPCODE);
            com.skywin.webserviceclients.uip.UIPServiceIF_getUserInfoByUserID_RequestStruct _myUIPServiceIF_getUserInfoByUserID_RequestStruct =
                new com.skywin.webserviceclients.uip.UIPServiceIF_getUserInfoByUserID_RequestStruct();
            
            _myUIPServiceIF_getUserInfoByUserID_RequestStruct.setString_1(string_1);
            _myUIPServiceIF_getUserInfoByUserID_RequestStruct.setString_2(string_2);
            _myUIPServiceIF_getUserInfoByUserID_RequestStruct.setString_3(string_3);
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getUserInfoByUserID_getUserInfoByUserID_QNAME);
            _bodyBlock.setValue(_myUIPServiceIF_getUserInfoByUserID_RequestStruct);
            _bodyBlock.setSerializer(myUIPServiceIF_getUserInfoByUserID_RequestStruct_SOAPSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.skywin.webserviceclients.uip.UIPServiceIF_getUserInfoByUserID_ResponseStruct _myUIPServiceIF_getUserInfoByUserID_ResponseStruct = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _myUIPServiceIF_getUserInfoByUserID_ResponseStruct =
                    (com.skywin.webserviceclients.uip.UIPServiceIF_getUserInfoByUserID_ResponseStruct)((SOAPDeserializationState)_responseObj).getInstance();
            } else {
                _myUIPServiceIF_getUserInfoByUserID_ResponseStruct =
                    (com.skywin.webserviceclients.uip.UIPServiceIF_getUserInfoByUserID_ResponseStruct)_responseObj;
            }
            
            return _myUIPServiceIF_getUserInfoByUserID_ResponseStruct.getResult();
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    
    /*
     *  this method deserializes the response structure in the body
     */
    protected void _readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState  state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case applicationToDo_OPCODE:
                _deserialize_applicationToDo(bodyReader, deserializationContext, state);
                break;
            case getUserInfoByOUID_OPCODE:
                _deserialize_getUserInfoByOUID(bodyReader, deserializationContext, state);
                break;
            case getVersion_OPCODE:
                _deserialize_getVersion(bodyReader, deserializationContext, state);
                break;
            case Logout_OPCODE:
                _deserialize_Logout(bodyReader, deserializationContext, state);
                break;
            case ValidateToken_OPCODE:
                _deserialize_ValidateToken(bodyReader, deserializationContext, state);
                break;
            case CommonLogin_OPCODE:
                _deserialize_CommonLogin(bodyReader, deserializationContext, state);
                break;
            case applicationToRead_OPCODE:
                _deserialize_applicationToRead(bodyReader, deserializationContext, state);
                break;
            case SSOLogin_OPCODE:
                _deserialize_SSOLogin(bodyReader, deserializationContext, state);
                break;
            case getOrgnizationInfoByOUID_OPCODE:
                _deserialize_getOrgnizationInfoByOUID(bodyReader, deserializationContext, state);
                break;
            case getUserInfoByUserID_OPCODE:
                _deserialize_getUserInfoByUserID(bodyReader, deserializationContext, state);
                break;
            default:
                throw new SenderException("sender.response.unrecognizedOperation", Integer.toString(opcode));
        }
    }
    
    
    
    /*
     * This method deserializes the body of the applicationToDo operation.
     */
    private void _deserialize_applicationToDo(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myUIPServiceIF_applicationToDo_ResponseStructObj =
            myUIPServiceIF_applicationToDo_ResponseStruct_SOAPSerializer.deserialize(ns1_applicationToDo_applicationToDoResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_applicationToDo_applicationToDoResponse_QNAME);
        bodyBlock.setValue(myUIPServiceIF_applicationToDo_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getUserInfoByOUID operation.
     */
    private void _deserialize_getUserInfoByOUID(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myUIPServiceIF_getUserInfoByOUID_ResponseStructObj =
            myUIPServiceIF_getUserInfoByOUID_ResponseStruct_SOAPSerializer.deserialize(ns1_getUserInfoByOUID_getUserInfoByOUIDResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getUserInfoByOUID_getUserInfoByOUIDResponse_QNAME);
        bodyBlock.setValue(myUIPServiceIF_getUserInfoByOUID_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getVersion operation.
     */
    private void _deserialize_getVersion(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myUIPServiceIF_getVersion_ResponseStructObj =
            myUIPServiceIF_getVersion_ResponseStruct_SOAPSerializer.deserialize(ns1_getVersion_getVersionResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getVersion_getVersionResponse_QNAME);
        bodyBlock.setValue(myUIPServiceIF_getVersion_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the Logout operation.
     */
    private void _deserialize_Logout(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myUIPServiceIF_Logout_ResponseStructObj =
            myUIPServiceIF_Logout_ResponseStruct_SOAPSerializer.deserialize(ns1_Logout_LogoutResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_Logout_LogoutResponse_QNAME);
        bodyBlock.setValue(myUIPServiceIF_Logout_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the ValidateToken operation.
     */
    private void _deserialize_ValidateToken(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myUIPServiceIF_ValidateToken_ResponseStructObj =
            myUIPServiceIF_ValidateToken_ResponseStruct_SOAPSerializer.deserialize(ns1_ValidateToken_ValidateTokenResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_ValidateToken_ValidateTokenResponse_QNAME);
        bodyBlock.setValue(myUIPServiceIF_ValidateToken_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the CommonLogin operation.
     */
    private void _deserialize_CommonLogin(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myUIPServiceIF_CommonLogin_ResponseStructObj =
            myUIPServiceIF_CommonLogin_ResponseStruct_SOAPSerializer.deserialize(ns1_CommonLogin_CommonLoginResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_CommonLogin_CommonLoginResponse_QNAME);
        bodyBlock.setValue(myUIPServiceIF_CommonLogin_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the applicationToRead operation.
     */
    private void _deserialize_applicationToRead(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myUIPServiceIF_applicationToRead_ResponseStructObj =
            myUIPServiceIF_applicationToRead_ResponseStruct_SOAPSerializer.deserialize(ns1_applicationToRead_applicationToReadResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_applicationToRead_applicationToReadResponse_QNAME);
        bodyBlock.setValue(myUIPServiceIF_applicationToRead_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the SSOLogin operation.
     */
    private void _deserialize_SSOLogin(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myUIPServiceIF_SSOLogin_ResponseStructObj =
            myUIPServiceIF_SSOLogin_ResponseStruct_SOAPSerializer.deserialize(ns1_SSOLogin_SSOLoginResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_SSOLogin_SSOLoginResponse_QNAME);
        bodyBlock.setValue(myUIPServiceIF_SSOLogin_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getOrgnizationInfoByOUID operation.
     */
    private void _deserialize_getOrgnizationInfoByOUID(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myUIPServiceIF_getOrgnizationInfoByOUID_ResponseStructObj =
            myUIPServiceIF_getOrgnizationInfoByOUID_ResponseStruct_SOAPSerializer.deserialize(ns1_getOrgnizationInfoByOUID_getOrgnizationInfoByOUIDResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getOrgnizationInfoByOUID_getOrgnizationInfoByOUIDResponse_QNAME);
        bodyBlock.setValue(myUIPServiceIF_getOrgnizationInfoByOUID_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getUserInfoByUserID operation.
     */
    private void _deserialize_getUserInfoByUserID(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myUIPServiceIF_getUserInfoByUserID_ResponseStructObj =
            myUIPServiceIF_getUserInfoByUserID_ResponseStruct_SOAPSerializer.deserialize(ns1_getUserInfoByUserID_getUserInfoByUserIDResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getUserInfoByUserID_getUserInfoByUserIDResponse_QNAME);
        bodyBlock.setValue(myUIPServiceIF_getUserInfoByUserID_ResponseStructObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    
    
    
    public String _getEncodingStyle() {
        return SOAPNamespaceConstants.ENCODING;
    }
    
    public void _setEncodingStyle(String encodingStyle) {
        throw new UnsupportedOperationException("cannot set encoding style");
    }
    
    /*
     * This method returns an array containing (prefix, nsURI) pairs.
     */
    protected String[] _getNamespaceDeclarations() {
        return myNamespace_declarations;
    }
    
    /*
     * This method returns an array containing the names of the headers we understand.
     */
    public QName[] _getUnderstoodHeaders() {
        return understoodHeaderNames;
    }
    
    public void _initialize(InternalTypeMappingRegistry registry) throws Exception {
        super._initialize(registry);
        myUIPServiceIF_getUserInfoByOUID_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.skywin.webserviceclients.uip.UIPServiceIF_getUserInfoByOUID_ResponseStruct.class, ns1_getUserInfoByOUIDResponse_TYPE_QNAME);
        myUIPServiceIF_getUserInfoByOUID_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.skywin.webserviceclients.uip.UIPServiceIF_getUserInfoByOUID_RequestStruct.class, ns1_getUserInfoByOUID_TYPE_QNAME);
        myUIPServiceIF_applicationToRead_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.skywin.webserviceclients.uip.UIPServiceIF_applicationToRead_ResponseStruct.class, ns1_applicationToReadResponse_TYPE_QNAME);
        myUIPServiceIF_SSOLogin_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.skywin.webserviceclients.uip.UIPServiceIF_SSOLogin_ResponseStruct.class, ns1_SSOLoginResponse_TYPE_QNAME);
        myUIPServiceIF_getVersion_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.skywin.webserviceclients.uip.UIPServiceIF_getVersion_RequestStruct.class, ns1_getVersion_TYPE_QNAME);
        myUIPServiceIF_getUserInfoByUserID_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.skywin.webserviceclients.uip.UIPServiceIF_getUserInfoByUserID_RequestStruct.class, ns1_getUserInfoByUserID_TYPE_QNAME);
        myUIPServiceIF_CommonLogin_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.skywin.webserviceclients.uip.UIPServiceIF_CommonLogin_RequestStruct.class, ns1_CommonLogin_TYPE_QNAME);
        myUIPServiceIF_ValidateToken_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.skywin.webserviceclients.uip.UIPServiceIF_ValidateToken_RequestStruct.class, ns1_ValidateToken_TYPE_QNAME);
        myUIPServiceIF_getOrgnizationInfoByOUID_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.skywin.webserviceclients.uip.UIPServiceIF_getOrgnizationInfoByOUID_ResponseStruct.class, ns1_getOrgnizationInfoByOUIDResponse_TYPE_QNAME);
        myUIPServiceIF_Logout_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.skywin.webserviceclients.uip.UIPServiceIF_Logout_RequestStruct.class, ns1_Logout_TYPE_QNAME);
        myUIPServiceIF_CommonLogin_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.skywin.webserviceclients.uip.UIPServiceIF_CommonLogin_ResponseStruct.class, ns1_CommonLoginResponse_TYPE_QNAME);
        myUIPServiceIF_Logout_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.skywin.webserviceclients.uip.UIPServiceIF_Logout_ResponseStruct.class, ns1_LogoutResponse_TYPE_QNAME);
        myUIPServiceIF_SSOLogin_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.skywin.webserviceclients.uip.UIPServiceIF_SSOLogin_RequestStruct.class, ns1_SSOLogin_TYPE_QNAME);
        myUIPServiceIF_getOrgnizationInfoByOUID_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.skywin.webserviceclients.uip.UIPServiceIF_getOrgnizationInfoByOUID_RequestStruct.class, ns1_getOrgnizationInfoByOUID_TYPE_QNAME);
        myUIPServiceIF_applicationToDo_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.skywin.webserviceclients.uip.UIPServiceIF_applicationToDo_ResponseStruct.class, ns1_applicationToDoResponse_TYPE_QNAME);
        myUIPServiceIF_ValidateToken_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.skywin.webserviceclients.uip.UIPServiceIF_ValidateToken_ResponseStruct.class, ns1_ValidateTokenResponse_TYPE_QNAME);
        myUIPServiceIF_applicationToRead_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.skywin.webserviceclients.uip.UIPServiceIF_applicationToRead_RequestStruct.class, ns1_applicationToRead_TYPE_QNAME);
        myUIPServiceIF_getVersion_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.skywin.webserviceclients.uip.UIPServiceIF_getVersion_ResponseStruct.class, ns1_getVersionResponse_TYPE_QNAME);
        myUIPServiceIF_applicationToDo_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.skywin.webserviceclients.uip.UIPServiceIF_applicationToDo_RequestStruct.class, ns1_applicationToDo_TYPE_QNAME);
        myUIPServiceIF_getUserInfoByUserID_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, com.skywin.webserviceclients.uip.UIPServiceIF_getUserInfoByUserID_ResponseStruct.class, ns1_getUserInfoByUserIDResponse_TYPE_QNAME);
    }
    
    private static final QName _portName = new QName("http://portal.gmcc.net/wsdl/UIPService", "UIPServiceIFPort");
    private static final int applicationToDo_OPCODE = 0;
    private static final int getUserInfoByOUID_OPCODE = 1;
    private static final int getVersion_OPCODE = 2;
    private static final int Logout_OPCODE = 3;
    private static final int ValidateToken_OPCODE = 4;
    private static final int CommonLogin_OPCODE = 5;
    private static final int applicationToRead_OPCODE = 6;
    private static final int SSOLogin_OPCODE = 7;
    private static final int getOrgnizationInfoByOUID_OPCODE = 8;
    private static final int getUserInfoByUserID_OPCODE = 9;
    private static final QName ns1_applicationToDo_applicationToDo_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "applicationToDo");
    private static final QName ns1_applicationToDo_TYPE_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "applicationToDo");
    private CombinedSerializer myUIPServiceIF_applicationToDo_RequestStruct_SOAPSerializer;
    private static final QName ns1_applicationToDo_applicationToDoResponse_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "applicationToDoResponse");
    private static final QName ns1_applicationToDoResponse_TYPE_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "applicationToDoResponse");
    private CombinedSerializer myUIPServiceIF_applicationToDo_ResponseStruct_SOAPSerializer;
    private static final QName ns1_getUserInfoByOUID_getUserInfoByOUID_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "getUserInfoByOUID");
    private static final QName ns1_getUserInfoByOUID_TYPE_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "getUserInfoByOUID");
    private CombinedSerializer myUIPServiceIF_getUserInfoByOUID_RequestStruct_SOAPSerializer;
    private static final QName ns1_getUserInfoByOUID_getUserInfoByOUIDResponse_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "getUserInfoByOUIDResponse");
    private static final QName ns1_getUserInfoByOUIDResponse_TYPE_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "getUserInfoByOUIDResponse");
    private CombinedSerializer myUIPServiceIF_getUserInfoByOUID_ResponseStruct_SOAPSerializer;
    private static final QName ns1_getVersion_getVersion_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "getVersion");
    private static final QName ns1_getVersion_TYPE_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "getVersion");
    private CombinedSerializer myUIPServiceIF_getVersion_RequestStruct_SOAPSerializer;
    private static final QName ns1_getVersion_getVersionResponse_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "getVersionResponse");
    private static final QName ns1_getVersionResponse_TYPE_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "getVersionResponse");
    private CombinedSerializer myUIPServiceIF_getVersion_ResponseStruct_SOAPSerializer;
    private static final QName ns1_Logout_Logout_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "Logout");
    private static final QName ns1_Logout_TYPE_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "Logout");
    private CombinedSerializer myUIPServiceIF_Logout_RequestStruct_SOAPSerializer;
    private static final QName ns1_Logout_LogoutResponse_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "LogoutResponse");
    private static final QName ns1_LogoutResponse_TYPE_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "LogoutResponse");
    private CombinedSerializer myUIPServiceIF_Logout_ResponseStruct_SOAPSerializer;
    private static final QName ns1_ValidateToken_ValidateToken_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "ValidateToken");
    private static final QName ns1_ValidateToken_TYPE_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "ValidateToken");
    private CombinedSerializer myUIPServiceIF_ValidateToken_RequestStruct_SOAPSerializer;
    private static final QName ns1_ValidateToken_ValidateTokenResponse_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "ValidateTokenResponse");
    private static final QName ns1_ValidateTokenResponse_TYPE_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "ValidateTokenResponse");
    private CombinedSerializer myUIPServiceIF_ValidateToken_ResponseStruct_SOAPSerializer;
    private static final QName ns1_CommonLogin_CommonLogin_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "CommonLogin");
    private static final QName ns1_CommonLogin_TYPE_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "CommonLogin");
    private CombinedSerializer myUIPServiceIF_CommonLogin_RequestStruct_SOAPSerializer;
    private static final QName ns1_CommonLogin_CommonLoginResponse_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "CommonLoginResponse");
    private static final QName ns1_CommonLoginResponse_TYPE_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "CommonLoginResponse");
    private CombinedSerializer myUIPServiceIF_CommonLogin_ResponseStruct_SOAPSerializer;
    private static final QName ns1_applicationToRead_applicationToRead_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "applicationToRead");
    private static final QName ns1_applicationToRead_TYPE_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "applicationToRead");
    private CombinedSerializer myUIPServiceIF_applicationToRead_RequestStruct_SOAPSerializer;
    private static final QName ns1_applicationToRead_applicationToReadResponse_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "applicationToReadResponse");
    private static final QName ns1_applicationToReadResponse_TYPE_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "applicationToReadResponse");
    private CombinedSerializer myUIPServiceIF_applicationToRead_ResponseStruct_SOAPSerializer;
    private static final QName ns1_SSOLogin_SSOLogin_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "SSOLogin");
    private static final QName ns1_SSOLogin_TYPE_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "SSOLogin");
    private CombinedSerializer myUIPServiceIF_SSOLogin_RequestStruct_SOAPSerializer;
    private static final QName ns1_SSOLogin_SSOLoginResponse_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "SSOLoginResponse");
    private static final QName ns1_SSOLoginResponse_TYPE_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "SSOLoginResponse");
    private CombinedSerializer myUIPServiceIF_SSOLogin_ResponseStruct_SOAPSerializer;
    private static final QName ns1_getOrgnizationInfoByOUID_getOrgnizationInfoByOUID_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "getOrgnizationInfoByOUID");
    private static final QName ns1_getOrgnizationInfoByOUID_TYPE_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "getOrgnizationInfoByOUID");
    private CombinedSerializer myUIPServiceIF_getOrgnizationInfoByOUID_RequestStruct_SOAPSerializer;
    private static final QName ns1_getOrgnizationInfoByOUID_getOrgnizationInfoByOUIDResponse_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "getOrgnizationInfoByOUIDResponse");
    private static final QName ns1_getOrgnizationInfoByOUIDResponse_TYPE_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "getOrgnizationInfoByOUIDResponse");
    private CombinedSerializer myUIPServiceIF_getOrgnizationInfoByOUID_ResponseStruct_SOAPSerializer;
    private static final QName ns1_getUserInfoByUserID_getUserInfoByUserID_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "getUserInfoByUserID");
    private static final QName ns1_getUserInfoByUserID_TYPE_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "getUserInfoByUserID");
    private CombinedSerializer myUIPServiceIF_getUserInfoByUserID_RequestStruct_SOAPSerializer;
    private static final QName ns1_getUserInfoByUserID_getUserInfoByUserIDResponse_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "getUserInfoByUserIDResponse");
    private static final QName ns1_getUserInfoByUserIDResponse_TYPE_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "getUserInfoByUserIDResponse");
    private CombinedSerializer myUIPServiceIF_getUserInfoByUserID_ResponseStruct_SOAPSerializer;
    private static final String[] myNamespace_declarations =
                                        new String[] {
                                            "ns0", "http://portal.gmcc.net/wsdl/UIPService",
                                            "ns1", "http://portal.gmcc.net/types/UIPService"
                                        };
    
    private static final QName[] understoodHeaderNames = new QName[] {  };
}
