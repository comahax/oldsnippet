// Helper class generated by xrpcc, do not edit.
// Contents subject to change without notice.

package com.skywin.webserviceclients.uip;

import javax.xml.namespace.QName;
import javax.xml.rpc.JAXRPCException;
import javax.xml.rpc.ServiceException;

import com.sun.xml.rpc.client.HandlerChainImpl;
import com.sun.xml.rpc.client.ServiceExceptionImpl;
import com.sun.xml.rpc.util.exception.LocalizableExceptionAdapter;

public class UIPService_Impl extends com.sun.xml.rpc.client.BasicService implements UIPService {
    private static final QName serviceName = new QName("http://portal.gmcc.net/wsdl/UIPService", "UIPService");
    private static final QName ns1_UIPServiceIFPort_QNAME = new QName("http://portal.gmcc.net/wsdl/UIPService", "UIPServiceIFPort");
    private static final Class UIPServiceIF_PortClass = com.skywin.webserviceclients.uip.UIPServiceIF.class;
    
    public UIPService_Impl() {
        super(serviceName, new QName[] {
                        ns1_UIPServiceIFPort_QNAME
                    },
            new com.skywin.webserviceclients.uip.UIPService_SerializerRegistry().getRegistry());
        
    }
    
    public java.rmi.Remote getPort(QName portName, Class serviceDefInterface) throws ServiceException {
        try {
            if (portName.equals(ns1_UIPServiceIFPort_QNAME) &&
                serviceDefInterface.equals(UIPServiceIF_PortClass)) {
                return getUIPServiceIFPort();
            }
        } catch (Exception e) {
            throw new ServiceExceptionImpl(new LocalizableExceptionAdapter(e));
        }
        return super.getPort(portName, serviceDefInterface);
    }
    
    public java.rmi.Remote getPort(Class serviceDefInterface) throws ServiceException {
        try {
            if (serviceDefInterface.equals(UIPServiceIF_PortClass)) {
                return getUIPServiceIFPort();
            }
        } catch (Exception e) {
            throw new ServiceExceptionImpl(new LocalizableExceptionAdapter(e));
        }
        return super.getPort(serviceDefInterface);
    }
    
    public com.skywin.webserviceclients.uip.UIPServiceIF getUIPServiceIFPort() {
        String[] roles = new String[] {};
        HandlerChainImpl handlerChain = new HandlerChainImpl(getHandlerRegistry().getHandlerChain(ns1_UIPServiceIFPort_QNAME));
        handlerChain.setRoles(roles);
        com.skywin.webserviceclients.uip.UIPServiceIF_Stub stub = new com.skywin.webserviceclients.uip.UIPServiceIF_Stub(handlerChain);
        try {
            stub._initialize(super.internalTypeRegistry);
        } catch (JAXRPCException e) {
            throw e;
        } catch (Exception e) {
            throw new JAXRPCException(e.getMessage(), e);
        }
        return stub;
    }
}
