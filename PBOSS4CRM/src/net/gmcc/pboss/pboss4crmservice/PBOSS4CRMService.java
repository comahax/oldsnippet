package net.gmcc.pboss.pboss4crmservice;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

import org.apache.cxf.transport.http.HTTPConduit;
import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;

/**
 * This class was generated by Apache CXF 2.3.8
 * 2012-02-09T15:21:30.093+08:00
 * Generated source version: 2.3.8
 * 
 */
@WebServiceClient(name = "PBOSS4CRMService", 
				  wsdlLocation = "data/PBOSSWS1.02.wsdl",
                  //wsdlLocation = "classpath:wsdl/PBOSSWS1.02.wsdl",
                  //wsdlLocation = "file:wsdl/PBOSSWS1.02.wsdl",
                  targetNamespace = "http://www.gmcc.net/pboss/PBOSS4CRMService/") 
public class PBOSS4CRMService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.gmcc.net/pboss/PBOSS4CRMService/", "PBOSS4CRMService");
    public final static QName PBOSSServiceSoap = new QName("http://www.gmcc.net/pboss/PBOSS4CRMService/", "PBOSSServiceSoap");
    static {
        URL url = null;
        try {
            //url = new URL("file:E:/source/PBOSS4CRM-GBK/WebRoot/WEB-INF/wsdl/PBOSSWS1.02.wsdl");
            url = PBOSS4CRMService.class.getClassLoader().getResource("data/PBOSSWS1.02.wsdl");
        } catch (Exception e) {
            java.util.logging.Logger.getLogger(PBOSS4CRMService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:data/PBOSSWS1.02.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public PBOSS4CRMService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public PBOSS4CRMService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public PBOSS4CRMService() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns PBOSSServicePort
     */
    @WebEndpoint(name = "PBOSSServiceSoap")
    public PBOSSServicePort getPBOSSServiceSoap() {
    	PBOSSServicePort port = super.getPort(PBOSSServiceSoap, PBOSSServicePort.class);    	
    	org.apache.cxf.endpoint.Client client = org.apache.cxf.frontend.ClientProxy.getClient(port);
    	org.apache.cxf.endpoint.Endpoint cxfEndpoint = client.getEndpoint();
    	cxfEndpoint.getOutInterceptors().add(new org.apache.cxf.interceptor.LoggingOutInterceptor());
    	cxfEndpoint.getInInterceptors().add(new org.apache.cxf.interceptor.LoggingInInterceptor());
    	
//    	HTTPConduit http = (HTTPConduit) client.getConduit();
//    	HTTPClientPolicy httpClientPolicy = new HTTPClientPolicy();
//    	httpClientPolicy.setConnectionTimeout(1000*60*1);
//    	httpClientPolicy.setAllowChunking(false);
//    	httpClientPolicy.setReceiveTimeout(1000*60*1);
//    	http.setClient(httpClientPolicy);
    	
    	return port;
//        return super.getPort(PBOSSServiceSoap, PBOSSServicePort.class);
        
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns PBOSSServicePort
     */
    @WebEndpoint(name = "PBOSSServiceSoap")
    public PBOSSServicePort getPBOSSServiceSoap(WebServiceFeature... features) {
        return super.getPort(PBOSSServiceSoap, PBOSSServicePort.class, features);
    }

}
