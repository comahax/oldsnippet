<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "spring-beans-2.0.dtd">
<!-- 接口注册工具。用于注册接口的默认实现类。InterfaceUtils.createDefaultObject(接口名) 方法可以创建默认的实现类实例。以分离接口和实现。-->
<beans>
	<bean id="com.sunrise.jop.common.utils.lang.InterfaceUtils" class="com.sunrise.jop.common.utils.lang.InterfaceUtils">
		<property name="interfaceClassMapping">
			<props>
                <prop key="com.sunrise.jop.infrastructure.component.Code2Name">com.sunrise.jop.infrastructure.component.impl.DefaultCode2Name</prop>
                <prop key="com.sunrise.jop.ui.struts2.UserProvider">com.sunrise.jop.ui.struts2.Struts2UserProvider</prop>

                <!--实际项目中应该使用自己的实现类-->
                <prop key="com.sunrise.jop.ui.filter.PermissionChecker">com.sunrise.ngcrm.common.check.WebPermissionChecker</prop>

                <!--实际项目中应该使用自己的数据字典类,参考下面的注释-->
                <prop key="com.sunrise.jop.business.base.dictitem.IDictitemDAO">com.sunrise.jop.business.base.dictitem.DictitemDAO</prop>
                <prop key="com.sunrise.jop.business.base.dictitem.IDictitemVO">com.sunrise.jop.business.base.dictitem.DictitemVO</prop>
                <!--<prop key="com.sunrise.jop.business.base.dictitem.IDictitemDAO">com.sunrise.ngcrm.business.base.dictitem.DictitemDAO</prop>-->
                <!--<prop key="com.sunrise.jop.business.base.dictitem.IDictitemVO">com.sunrise.ngcrm.business.base.dictitem.DictitemVO</prop>-->

                <prop key="com.sunrise.ngcrm.control.base.opershortcut.OperShortcutTreeHelper">com.sunrise.ngcrm.control.base.opershortcut.OperShortcutTreeHelper</prop>
			</props>
		</property>
	</bean>
	
	<!-- 单数据源使用	-->
	<bean id="com.sunrise.jop.infrastructure.db.SessionFactoryRouter" class="com.sunrise.jop.infrastructure.db.hibernate3.Hibernate3SessionFactoryRouter"></bean>
	
	<!-- sessionFactory_DB_COMMON 也可以替换为在 sessionFactory.properties 中需配置 DB_COMMON=hibernate.cfg.xml作为数据源 -->
	<bean id="sessionFactory_DB_COMMON" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">	
		<property name="configLocations">		
			<list>
				<value>classpath:hibernate_gz.cfg.xml</value>
                <value>classpath:hibernate.cfg.xml</value>
			</list>
		</property>
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref local="sessionFactory_DB_COMMON" />
		</property> 
	</bean>	
	
	<!-- 多数据源使用
	  multiDBMode 取值: 公共+地市库模式 COMMON_CITY_MODE， 平行库模式:BROTHERS_MODE

	<bean id="com.sunrise.jop.infrastructure.db.SessionFactoryRouter" class="com.sunrise.jop.infrastructure.db.hibernate3.Hibernate3SessionFactoryRouter">
		<property name="sessionFactoryConfig" value="data/sessionFactory.properties" />
		<property name="defaultDataSource" value="DB_COMMON"/>		
		<property name="multiDBMode" value="COMMON_CITY_MODE"/> 
	</bean>
	
	<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
		<property name="userTransactionName" value="java:comp/UserTransaction"/>
	</bean>	
		--> 
	
	<!-- 注册自动代理创建，为业务Bean添加拦截器 -->	
	<bean id="BOAutoProxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">	
		<property name="proxyTargetClass" value="true"></property>
		<property name="beanNames">
			<list>
				<value>*BO</value>				
			</list>
		</property>
		<property name="interceptorNames">
			<list>				
				<value>trasactionMethodPointcutAdvisor</value>	<!-- 注意： 事务拦截器必须包含在业务日志拦截器中，以免事务控制混乱；或者将业务日志的方法recordLog 设置为 PROPAGATION_REQUIRES_NEW 属性 -->
			</list>
		</property>
	</bean>
	

	<bean id="transactionAdvisor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager">
			<ref local="transactionManager"/>
		</property>
		<property name="transactionAttributes">
			<props>
				<!-- 注意开发规范：业务bean的业务方法必须为 do* 格式，才能被包含事务！ -->
				<prop key="do*">PROPAGATION_REQUIRED</prop>				
			</props>
		</property>
	</bean>
	
	<bean id="trasactionMethodPointcutAdvisor" class="org.springframework.aop.support.NameMatchMethodPointcutAdvisor">
		<property name="mappedNames">
			<list>
				<value>do*</value>
			</list>
		</property>
		<property name="advice">
			<ref local="transactionAdvisor" />
		</property>
	</bean>

    <!-- 单元测试用配置项,同时作为单数据源配置范例,给DAOTestCase用 -->
    <bean id="testCommonUser" class="com.sunrise.exam.web.common.ExamUser">
        <property name="cityid">
            <value>DB_COMMON</value>
        </property>
        <property name="oprcode">
            <value>jop2</value>
        </property>
        <property name="ip">
            <value>127.0.0.1</value>
        </property>
    </bean>

    <bean id="testCityUser" class="com.sunrise.exam.web.common.ExamUser">
        <property name="cityid">
            <value>DB_COMMON</value>
        </property>
        <property name="oprcode">
            <value>jop2</value>
        </property>
    </bean>

    <bean id="sessionFactory_Test" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="configLocations">
            <list>
                <value>classpath:hibernate_gz.cfg.xml</value>
                <value>classpath:hibernate.cfg.xml</value>
            </list>
        </property>
    </bean>

    <bean id="transactionManager_Test" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory">
            <ref local="sessionFactory_Test" />
        </property>
    </bean>

    <bean id="transactionAdvisor_Test" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager">
            <ref local="transactionManager_Test"/>
        </property>
        <property name="transactionAttributes">
            <props>
                <!-- 注意开发规范：业务bean的业务方法必须为 do* 格式，才能被包含事务！ -->
                <prop key="do*">PROPAGATION_REQUIRED</prop>
            </props>
        </property>
    </bean>
</beans>